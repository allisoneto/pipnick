from pathlib import Path
import logging

from pipnick.photometry.psf_photometry import psf_analysis, consolidate_groups
from pipnick.photometry.aperture_photometry import aperture_analysis
from pipnick.utils.dir_nav import organize_files

logger = logging.getLogger(__name__)


def photometry_all(maindir, use_table=False,
                   excl_files=[], excl_objs=[], excl_filts=[],
                   thresh=8.0, group=False, mode='all',
                   fittype='circ', plot_final=False, plot_inters=False):
    r"""
    Perform photometric analysis on reduced files in a specified directory.

    Procedure:
    
        - Extract image files from the provided directory.
        - Perform PSF photometry on each image using 
          :func:`psf_analysis`.
        - Optionally consolidate detected sources into groups
          using :func:`consolidate_groups`.
        - Conduct aperture photometry on the results with
          :func:`aperture_analysis`.
        - Save the source catalogs to CSV files in the output directory.

    Parameters
    ----------
    maindir : str or Path
        Path to the main directory containing the reduced directory
        with the FITS files to be photometrically analyzed.
    use_table : bool, optional
        Whether to use the table file generated by organize_files() 
        to automatically exclude files the have been commented-out
    excl_files : list, optional
        List of file stems to exclude (exact match not necessary).
    excl_objs : list, optional
        List of object strings to exclude (exact match not necessary).
    excl_filts : list, optional
        List of filter names to exclude.
    thresh : :obj:`float`, optional
        Threshold for source detection, defined as a multiple of the background 
        standard deviation. Default is 8.0.
    group : :obj:`bool`, optional
        If True, consolidate detected sources that belong to the same group 
        into a single source. Default is False.
    mode : :obj:`str`, optional
        Mode to run PSF photometry. Use 'all' for a complete analysis or 'new'
        for only analyzing newly detected sources. Choices are ['all', 'new']. 
        Default is 'all'.
    fittype : :obj:`str`, optional
        Type of Moffat fit to use for PSF photometry. Choices are 
        ['circ', 'ellip']. Default is 'circ'.
    plot_final : :obj:`bool`, optional
        If True, display final images with detected sources and their fluxes 
        labeled. Default is False.
    plot_inters : :obj:`bool`, optional
        If True, display intermediate images showing initial sources and 
        source groups for inspection. Default is False.

    Returns
    -------
    source_catalog_paths : `list`
        A list of file paths to the generated source catalogs (in CSV format).
        Each entry corresponds to an analyzed image file.
    """
    logger.info(f'---- photometry_all() called on main directory {maindir}')
    
    # Set the output directory based on whether grouping is enabled
    maindir = Path(maindir)
    reddir = maindir / 'reduced'
    phot_dir = maindir / 'photometric'
    proc_dir = phot_dir / "proc_files"
    Path.mkdir(phot_dir, exist_ok=True)
    Path.mkdir(proc_dir, exist_ok=True)
    if group:
        output_dir = phot_dir / 'consolidated'
        output_file_append = '_photsrcs_consol.csv'
    else:
        output_dir = phot_dir / 'unconsolidated'
        output_file_append = '_photsrcs.csv'
    Path.mkdir(output_dir, exist_ok=True)
    
    file_df = organize_files(reddir, use_table, 'photometry',
                             excl_files, excl_objs, excl_filts)
    image_paths = file_df.paths
    source_catalog_paths = []  # List to hold paths to source catalogs
    
    for image_path in image_paths:
        # Set output file path
        filestem = image_path.stem.split('_')[0]
        obj_dir = image_path.parent
        Path.mkdir(output_dir / obj_dir.name, exist_ok=True)
        output_file = output_dir / obj_dir.name / (filestem + output_file_append)
        
        # Perform PSF photometry on the file
        psf_data = psf_analysis(image_path, proc_dir, thresh=thresh, mode=mode, 
                                fittype=fittype, plot_final=plot_final, 
                                plot_inters=plot_inters)
        
        # Consolidate groups of sources if enabled
        if group:
            psf_data = consolidate_groups(psf_data)
        
        # Perform aperture photometry
        all_data = aperture_analysis(psf_data, image_path)
        
        # Save result
        all_data.write(output_file, format='csv', overwrite=True)
        source_catalog_paths.append(output_file)
    
    logger.info('---- photometry_all() call ended')
    # Return the list of paths to the source catalogs
    return source_catalog_paths